package org.but4reuse.adapters.cppcdt.tests.xmlParser;

import java.io.File;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import org.but4reuse.adapters.cppcdt.callhierarchy.xml.FunctionSignatureParser;
import org.junit.Test;
import org.junit.Assert;

public class FunctionSignatureParserTestHelper {

	/**
	 * This is a test suite helper for our function signature parser. The
	 * function signature parser is used to extract a function id and associate
	 * it to it's original signature, from a doxygen xml file. The function
	 * signature contains the function base class and function name plus all the
	 * parameter types in the order of their declaration. This is afterwards
	 * used with the dot parser to extract the function call graph dependencies.
	 * 
	 * All the main test logic is in this helper class.
	 *
	 * The xml files have been generated by doxygen (Linux) version 1.8.13 .
	 * 
	 * //NOTE the the function id is transformed to match the same format as the
	 * one in the dot files (check FunctionSignatureParser::transformId)
	 * 
	 * 
	 * @author sandu.postaru
	 *
	 */

	/** Test file */
	protected File signatureFile;

	/** Map containing the id and the function signature */
	protected Map<String, String> signatureMap;

	/** Expected function signatures to be found */
	protected Map<String, String> expectedSignatureMap;

	protected FunctionSignatureParser parser;

	public FunctionSignatureParserTestHelper() {
		expectedSignatureMap = new HashMap<String, String>();
	}

	public void initialise(String fileName) {
		signatureFile = Paths.get("data", "xmlParser", fileName).toFile();
		parser = new FunctionSignatureParser();

		parser.parse(signatureFile);
		signatureMap = parser.getSignatureMap();
	}

	@Test
	public void testFunctionSignatures() {		

		Assert.assertEquals(expectedSignatureMap.size(), signatureMap.size());

		for (Map.Entry<String, String> entry : expectedSignatureMap.entrySet()) {

			String expectedId = entry.getKey();
			String expectedSignature = entry.getValue();

			String actualSignature = signatureMap.get(expectedId);

			// existing value 
			Assert.assertNotEquals(null, actualSignature);
			
			// equal values
			Assert.assertEquals(expectedSignature, actualSignature);
		}
	}

}
